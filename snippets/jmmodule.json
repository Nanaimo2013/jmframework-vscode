{
  "Basic Module Structure": {
    "prefix": "module",
    "body": [
      "/**",
      " * ${1:ModuleName} Module",
      " * ${2:Module description}",
      " */",
      "module ${1:ModuleName} {",
      "\t// Module constants",
      "\tconstant ${3:CONSTANT_NAME} = ${4:value};",
      "\t",
      "\t// Private module state",
      "\tprivate state = {",
      "\t\t${5:property}: ${6:initialValue}",
      "\t};",
      "\t",
      "\t// Private methods",
      "\tprivate function ${7:privateMethod}(${8:param}) {",
      "\t\t$0",
      "\t}",
      "\t",
      "\t// Public methods",
      "\tpublic function ${9:publicMethod}(${10:param}) {",
      "\t\t// Method implementation",
      "\t}",
      "\t",
      "\t// Initialize module",
      "\tpublic function initialize() {",
      "\t\t// Initialization code",
      "\t\treturn {",
      "\t\t\t// Public API",
      "\t\t};",
      "\t}",
      "}",
      "",
      "export default ${1:ModuleName};"
    ],
    "description": "Basic module structure"
  },
  "Data Module": {
    "prefix": "data-module",
    "body": [
      "/**",
      " * ${1:DataModuleName} Module",
      " * Data management module for ${2:entity} data",
      " */",
      "module ${1:DataModuleName} {",
      "\t// API endpoints",
      "\tconstant ENDPOINTS = {",
      "\t\tBASE: \"${3:/api/${4:entity}}\",",
      "\t\tBY_ID: \"${3:/api/${4:entity}}/{id}\"",
      "\t};",
      "\t",
      "\t// Private module state",
      "\tprivate state = {",
      "\t\tdata: [],",
      "\t\tisLoading: false,",
      "\t\terror: null"
      "\t};",
      "\t",
      "\t// Event handlers",
      "\tprivate eventHandlers = {",
      "\t\tonDataChanged: [],",
      "\t\tonError: []"
      "\t};",
      "\t",
      "\t// Private methods",
      "\tprivate function emitEvent(eventName, data) {",
      "\t\tif (eventHandlers[eventName]) {",
      "\t\t\teventHandlers[eventName].forEach(handler => handler(data));",
      "\t\t}",
      "\t}",
      "\t",
      "\t// Public methods",
      "\tpublic async function fetchAll() {",
      "\t\tstate.isLoading = true;",
      "\t\t",
      "\t\ttry {",
      "\t\t\tconst response = await fetch(ENDPOINTS.BASE);",
      "\t\t\tconst data = await response.json();",
      "\t\t\tstate.data = data;",
      "\t\t\temitEvent('onDataChanged', state.data);",
      "\t\t\treturn data;",
      "\t\t} catch (error) {",
      "\t\t\tstate.error = error.message;",
      "\t\t\temitEvent('onError', state.error);",
      "\t\t\treturn null;",
      "\t\t} finally {",
      "\t\t\tstate.isLoading = false;",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic async function getById(id) {",
      "\t\tstate.isLoading = true;",
      "\t\t",
      "\t\ttry {",
      "\t\t\tconst url = ENDPOINTS.BY_ID.replace('{id}', id);",
      "\t\t\tconst response = await fetch(url);",
      "\t\t\tconst data = await response.json();",
      "\t\t\treturn data;",
      "\t\t} catch (error) {",
      "\t\t\tstate.error = error.message;",
      "\t\t\temitEvent('onError', state.error);",
      "\t\t\treturn null;",
      "\t\t} finally {",
      "\t\t\tstate.isLoading = false;",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic function addListener(event, handler) {",
      "\t\tif (eventHandlers[event]) {",
      "\t\t\teventHandlers[event].push(handler);",
      "\t\t\t",
      "\t\t\treturn () => {",
      "\t\t\t\teventHandlers[event] = eventHandlers[event].filter(h => h !== handler);",
      "\t\t\t};",
      "\t\t}",
      "\t\t",
      "\t\treturn () => {};",
      "\t}",
      "\t",
      "\t// Initialize module",
      "\tpublic function initialize() {",
      "\t\t// Initial data load",
      "\t\tfetchAll();",
      "\t\t",
      "\t\treturn {",
      "\t\t\tfetchAll,",
      "\t\t\tgetById,",
      "\t\t\taddListener"
      "\t\t};",
      "\t}",
      "}",
      "",
      "export default ${1:DataModuleName};"
    ],
    "description": "Data management module template"
  },
  "Auth Module": {
    "prefix": "auth-module",
    "body": [
      "/**",
      " * Authentication Module",
      " * Handles user authentication and session management",
      " */",
      "module AuthModule {",
      "\t// Constants",
      "\tconstant AUTH_ENDPOINTS = {",
      "\t\tLOGIN: \"${1:/api/auth/login}\",",
      "\t\tLOGOUT: \"${2:/api/auth/logout}\",",
      "\t\tREGISTER: \"${3:/api/auth/register}\",",
      "\t\tREFRESH: \"${4:/api/auth/refresh-token}\""
      "\t};",
      "\t",
      "\tconstant AUTH_STORAGE_KEY = \"${5:auth_data}\";",
      "\tconstant TOKEN_STORAGE_KEY = \"${6:auth_token}\";",
      "\t",
      "\t// Private module state",
      "\tprivate state = {",
      "\t\tuser: null,",
      "\t\ttoken: null,",
      "\t\tisAuthenticated: false,",
      "\t\tisLoading: false,",
      "\t\terror: null"
      "\t};",
      "\t",
      "\t// Event handlers",
      "\tprivate eventHandlers = {",
      "\t\tonLogin: [],",
      "\t\tonLogout: [],",
      "\t\tonAuthError: []"
      "\t};",
      "\t",
      "\t// Private methods",
      "\tprivate function emitEvent(eventName, data) {",
      "\t\tif (eventHandlers[eventName]) {",
      "\t\t\teventHandlers[eventName].forEach(handler => handler(data));",
      "\t\t}",
      "\t}",
      "\t",
      "\tprivate function persistAuth(userData, token) {",
      "\t\tlocalStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(userData));",
      "\t\tlocalStorage.setItem(TOKEN_STORAGE_KEY, token);",
      "\t}",
      "\t",
      "\tprivate function clearAuth() {",
      "\t\tlocalStorage.removeItem(AUTH_STORAGE_KEY);",
      "\t\tlocalStorage.removeItem(TOKEN_STORAGE_KEY);",
      "\t}",
      "\t",
      "\tprivate function loadPersistedAuth() {",
      "\t\tconst userData = localStorage.getItem(AUTH_STORAGE_KEY);",
      "\t\tconst token = localStorage.getItem(TOKEN_STORAGE_KEY);",
      "\t\t",
      "\t\tif (userData && token) {",
      "\t\t\ttry {",
      "\t\t\t\tstate.user = JSON.parse(userData);",
      "\t\t\t\tstate.token = token;",
      "\t\t\t\tstate.isAuthenticated = true;",
      "\t\t\t\treturn true;",
      "\t\t\t} catch (e) {",
      "\t\t\t\tclearAuth();",
      "\t\t\t\treturn false;",
      "\t\t\t}",
      "\t\t}",
      "\t\t",
      "\t\treturn false;",
      "\t}",
      "\t",
      "\t// Public methods",
      "\tpublic async function login(email, password) {",
      "\t\tstate.isLoading = true;",
      "\t\tstate.error = null;",
      "\t\t",
      "\t\ttry {",
      "\t\t\tconst response = await fetch(AUTH_ENDPOINTS.LOGIN, {",
      "\t\t\t\tmethod: 'POST',",
      "\t\t\t\theaders: {",
      "\t\t\t\t\t'Content-Type': 'application/json'"
      "\t\t\t\t},",
      "\t\t\t\tbody: JSON.stringify({ email, password })"
      "\t\t\t});",
      "\t\t\t",
      "\t\t\tconst data = await response.json();",
      "\t\t\t",
      "\t\t\tif (response.ok && data.token) {",
      "\t\t\t\tstate.user = data.user;",
      "\t\t\t\tstate.token = data.token;",
      "\t\t\t\tstate.isAuthenticated = true;",
      "\t\t\t\t",
      "\t\t\t\tpersistAuth(data.user, data.token);",
      "\t\t\t\temitEvent('onLogin', { user: data.user });",
      "\t\t\t\t",
      "\t\t\t\treturn { success: true, user: data.user };",
      "\t\t\t} else {",
      "\t\t\t\tstate.error = data.message || 'Authentication failed';",
      "\t\t\t\temitEvent('onAuthError', state.error);",
      "\t\t\t\treturn { success: false, error: state.error };",
      "\t\t\t}",
      "\t\t} catch (error) {",
      "\t\t\tstate.error = error.message;",
      "\t\t\temitEvent('onAuthError', state.error);",
      "\t\t\treturn { success: false, error: state.error };",
      "\t\t} finally {",
      "\t\t\tstate.isLoading = false;",
      "\t\t}",
      "\t}",
      "\t",
      "\tpublic async function logout() {",
      "\t\ttry {",
      "\t\t\tif (state.token) {",
      "\t\t\t\tawait fetch(AUTH_ENDPOINTS.LOGOUT, {",
      "\t\t\t\t\tmethod: 'POST',",
      "\t\t\t\t\theaders: {",
      "\t\t\t\t\t\t'Authorization': `Bearer ${state.token}`"
      "\t\t\t\t\t}"
      "\t\t\t\t});",
      "\t\t\t}",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error('Logout error:', error);",
      "\t\t} finally {",
      "\t\t\t// Clear regardless of API success",
      "\t\t\tstate.user = null;",
      "\t\t\tstate.token = null;",
      "\t\t\tstate.isAuthenticated = false;",
      "\t\t\t",
      "\t\t\tclearAuth();",
      "\t\t\temitEvent('onLogout');",
      "\t\t}",
      "\t\t",
      "\t\treturn { success: true };",
      "\t}",
      "\t",
      "\tpublic function addListener(event, handler) {",
      "\t\tif (eventHandlers[event]) {",
      "\t\t\teventHandlers[event].push(handler);",
      "\t\t\t",
      "\t\t\treturn () => {",
      "\t\t\t\teventHandlers[event] = eventHandlers[event].filter(h => h !== handler);",
      "\t\t\t};",
      "\t\t}",
      "\t\t",
      "\t\treturn () => {};",
      "\t}",
      "\t",
      "\tpublic function getAuthToken() {",
      "\t\treturn state.token;",
      "\t}",
      "\t",
      "\tpublic function getCurrentUser() {",
      "\t\treturn state.user;",
      "\t}",
      "\t",
      "\tpublic function isAuthenticated() {",
      "\t\treturn state.isAuthenticated;",
      "\t}",
      "\t",
      "\t// Initialize module",
      "\tpublic function initialize() {",
      "\t\t// Try to restore session from localStorage",
      "\t\tloadPersistedAuth();",
      "\t\t",
      "\t\treturn {",
      "\t\t\tlogin,",
      "\t\t\tlogout,",
      "\t\t\taddListener,",
      "\t\t\tgetAuthToken,",
      "\t\t\tgetCurrentUser,",
      "\t\t\tisAuthenticated"
      "\t\t};",
      "\t}",
      "}",
      "",
      "export default AuthModule;"
    ],
    "description": "Authentication module template"
  },
  "API Service Module": {
    "prefix": "api-module",
    "body": [
      "/**",
      " * API Service Module",
      " * Provides a unified API interface for the application",
      " */",
      "module ApiModule {",
      "\t// Constants",
      "\tconstant API_BASE_URL = \"${1:https://api.example.com}\";",
      "\tconstant DEFAULT_HEADERS = {",
      "\t\t'Content-Type': 'application/json'"
      "\t};",
      "\t",
      "\t// Private module state",
      "\tprivate state = {",
      "\t\tauthToken: null,",
      "\t\trequestInterceptors: [],",
      "\t\tresponseInterceptors: []"
      "\t};",
      "\t",
      "\t// Private methods",
      "\tprivate function getHeaders() {",
      "\t\tconst headers = { ...DEFAULT_HEADERS };",
      "\t\t",
      "\t\tif (state.authToken) {",
      "\t\t\theaders['Authorization'] = `Bearer ${state.authToken}`;",
      "\t\t}",
      "\t\t",
      "\t\treturn headers;",
      "\t}",
      "\t",
      "\tprivate function applyRequestInterceptors(config) {",
      "\t\tlet updatedConfig = { ...config };",
      "\t\t",
      "\t\tstate.requestInterceptors.forEach(interceptor => {",
      "\t\t\tupdatedConfig = interceptor(updatedConfig);",
      "\t\t});",
      "\t\t",
      "\t\treturn updatedConfig;",
      "\t}",
      "\t",
      "\tprivate function applyResponseInterceptors(response) {",
      "\t\tlet updatedResponse = response;",
      "\t\t",
      "\t\tstate.responseInterceptors.forEach(interceptor => {",
      "\t\t\tupdatedResponse = interceptor(updatedResponse);",
      "\t\t});",
      "\t\t",
      "\t\treturn updatedResponse;",
      "\t}",
      "\t",
      "\tprivate async function request(method, endpoint, data = null, customConfig = {}) {",
      "\t\tconst url = endpoint.startsWith('http') ? endpoint : `${API_BASE_URL}${endpoint}`;",
      "\t\t",
      "\t\tlet config = {",
      "\t\t\tmethod,",
      "\t\t\theaders: getHeaders(),",
      "\t\t\t...customConfig"
      "\t\t};",
      "\t\t",
      "\t\tif (data) {",
      "\t\t\tconfig.body = JSON.stringify(data);",
      "\t\t}",
      "\t\t",
      "\t\t// Apply request interceptors",
      "\t\tconfig = applyRequestInterceptors(config);",
      "\t\t",
      "\t\ttry {",
      "\t\t\tconst response = await fetch(url, config);",
      "\t\t\tlet result;",
      "\t\t\t",
      "\t\t\tconst contentType = response.headers.get('content-type');",
      "\t\t\tif (contentType && contentType.includes('application/json')) {",
      "\t\t\t\tresult = await response.json();",
      "\t\t\t} else {",
      "\t\t\t\tresult = await response.text();",
      "\t\t\t}",
      "\t\t\t",
      "\t\t\tconst processedResponse = {",
      "\t\t\t\tdata: result,",
      "\t\t\t\tstatus: response.status,",
      "\t\t\t\theaders: response.headers,",
      "\t\t\t\tok: response.ok"
      "\t\t\t};",
      "\t\t\t",
      "\t\t\t// Apply response interceptors",
      "\t\t\tconst finalResponse = applyResponseInterceptors(processedResponse);",
      "\t\t\t",
      "\t\t\tif (!finalResponse.ok) {",
      "\t\t\t\tthrow new Error(finalResponse.data.message || 'API request failed');",
      "\t\t\t}",
      "\t\t\t",
      "\t\t\treturn finalResponse.data;",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error(`API Error (${method} ${url}):`, error);",
      "\t\t\tthrow error;",
      "\t\t}",
      "\t}",
      "\t",
      "\t// Public methods",
      "\tpublic function setAuthToken(token) {",
      "\t\tstate.authToken = token;",
      "\t}",
      "\t",
      "\tpublic function clearAuthToken() {",
      "\t\tstate.authToken = null;",
      "\t}",
      "\t",
      "\tpublic function addRequestInterceptor(interceptor) {",
      "\t\tstate.requestInterceptors.push(interceptor);",
      "\t\t",
      "\t\treturn () => {",
      "\t\t\tstate.requestInterceptors = state.requestInterceptors.filter(i => i !== interceptor);",
      "\t\t};",
      "\t}",
      "\t",
      "\tpublic function addResponseInterceptor(interceptor) {",
      "\t\tstate.responseInterceptors.push(interceptor);",
      "\t\t",
      "\t\treturn () => {",
      "\t\t\tstate.responseInterceptors = state.responseInterceptors.filter(i => i !== interceptor);",
      "\t\t};",
      "\t}",
      "\t",
      "\tpublic function get(endpoint, config = {}) {",
      "\t\treturn request('GET', endpoint, null, config);",
      "\t}",
      "\t",
      "\tpublic function post(endpoint, data, config = {}) {",
      "\t\treturn request('POST', endpoint, data, config);",
      "\t}",
      "\t",
      "\tpublic function put(endpoint, data, config = {}) {",
      "\t\treturn request('PUT', endpoint, data, config);",
      "\t}",
      "\t",
      "\tpublic function patch(endpoint, data, config = {}) {",
      "\t\treturn request('PATCH', endpoint, data, config);",
      "\t}",
      "\t",
      "\tpublic function delete(endpoint, config = {}) {",
      "\t\treturn request('DELETE', endpoint, null, config);",
      "\t}",
      "\t",
      "\t// Initialize module",
      "\tpublic function initialize() {",
      "\t\treturn {",
      "\t\t\tsetAuthToken,",
      "\t\t\tclearAuthToken,",
      "\t\t\taddRequestInterceptor,",
      "\t\t\taddResponseInterceptor,",
      "\t\t\tget,",
      "\t\t\tpost,",
      "\t\t\tput,",
      "\t\t\tpatch,",
      "\t\t\tdelete"
      "\t\t};",
      "\t}",
      "}",
      "",
      "export default ApiModule;"
    ],
    "description": "API service module template"
  },
  "Constants Declaration": {
    "prefix": "constant",
    "body": [
      "constant ${1:CONSTANT_NAME} = ${2:value};"
    ],
    "description": "Declare a module constant"
  },
  "Private State": {
    "prefix": "private-state",
    "body": [
      "private state = {",
      "\t${1:property}: ${2:value},$0",
      "};"
    ],
    "description": "Declare private module state"
  },
  "Private Method": {
    "prefix": "private-function",
    "body": [
      "private function ${1:methodName}(${2:params}) {",
      "\t$0",
      "}"
    ],
    "description": "Declare a private module method"
  },
  "Public Method": {
    "prefix": "public-function",
    "body": [
      "public function ${1:methodName}(${2:params}) {",
      "\t$0",
      "}"
    ],
    "description": "Declare a public module method"
  },
  "Async Method": {
    "prefix": "async-function",
    "body": [
      "public async function ${1:methodName}(${2:params}) {",
      "\ttry {",
      "\t\t$0",
      "\t} catch (error) {",
      "\t\tconsole.error('${1:methodName} error:', error);",
      "\t\tthrow error;",
      "\t}",
      "}"
    ],
    "description": "Declare an async module method with error handling"
  },
  "Initialize Method": {
    "prefix": "initialize",
    "body": [
      "public function initialize() {",
      "\t// Initialization code",
      "\t$0",
      "\treturn {",
      "\t\t// Public API",
      "\t\t${1:method1},",
      "\t\t${2:method2}"
      "\t};",
      "}"
    ],
    "description": "Module initialization method"
  },
  "JMModule Document": {
    "prefix": "jmmodule-document",
    "body": [
      "/*",
      " * JMFramework Module File",
      " * ${1:Description}",
      " * Version: ${2:1.0.0}",
      " * Author: ${3:Your Name}",
      " * Created: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      " */",
      "",
      "// Import any dependencies",
      "import { ${4:Dependency} } from \"${5:./path/to/dependency}\";",
      "",
      "/**",
      " * ${6:ModuleName} module",
      " * ${7:Module description}",
      " */",
      "module ${6:ModuleName} {",
      "  // Module properties",
      "  const version = \"${8:1.0.0}\";",
      "  const author = \"${9:Your Name}\";",
      "",
      "  /**",
      "   * ${10:functionName} - Public function",
      "   * ${11:Function description}",
      "   * @param {${12:type}} ${13:param} - ${14:param description}",
      "   * @returns {${15:returnType}} ${16:return description}",
      "   */",
      "  export function ${10:functionName}(${13:param}) {",
      "    // Function implementation",
      "    ${17:return ${13:param};}",
      "  }",
      "",
      "  /**",
      "   * Private helper function",
      "   * @private",
      "   */",
      "  function _helper() {",
      "    // Private implementation",
      "    ${18:// Code here}",
      "  }",
      "",
      "  // Default export",
      "  export default {",
      "    name: \"${6:ModuleName}\",",
      "    version,",
      "    ${10:functionName}",
      "  };",
      "}",
      ""
    ],
    "description": "Create a new JMModule document with exports and functions"
  },
  "JMF Module": {
    "prefix": "module",
    "body": [
      "module ${1:ModuleName} {",
      "  // Module code",
      "  ${2:// Your code here}",
      "",
      "  export ${3:function} ${4:name}(${5:params}) {",
      "    ${6:// Function implementation}",
      "  }",
      "",
      "  export default {",
      "    ${4:name}",
      "  };",
      "}"
    ],
    "description": "Create a JMF module"
  },
  "JMF Export Function": {
    "prefix": "export-function",
    "body": [
      "export function ${1:functionName}(${2:params}) {",
      "  ${3:// Function implementation}",
      "}"
    ],
    "description": "Export a function from a module"
  },
  "JMF Export Default": {
    "prefix": "export-default",
    "body": [
      "export default {",
      "  ${1:name: value}",
      "};"
    ],
    "description": "Create a default export for a module"
  }
} 